
When saving a file, instead of immediately overwriting a file, some editors write a temporary file first, then delete the original and rename the temporary. (?)
Why do they do this?
Is it more recovery-friendly?
When saving a new file I accidentally overwrote an existing file and I cant find any way to get it back. First of all, it should have warned that it's going to overwrite existing data. But secondly maybe there is a better way to save files.

bug: if we cant open a file, we shouldnt end up with a gtk error...

bug: unindenting a block of code is buggy
* shift-tab block of text when block of text contains an empty line
* bug: shift + tab block of code which contains empty lines

plausable feature: searching limited to a specific scope somehow? like only inside a function... we have that and we use { and }, but what about "scoping" by block/paragraph? Another thing is that this is a very language specific feature.. -- tried that but it was somewhat complicated.

search depth! when i want to find something i have pieces of information. i may for example know, that its a hidden file.. narrowing down the possibilities seems to be very good performance-wise. large resultsets render the application unresposive, can something be done? large number of results isnt very helpful anyways -- display only some of them? some results are total bogus -- needs investigation. search used to crash, is this gone?

plausable feature: keeping file browser up-to-date with fs-changes
* it's really annoying to update the file-browsers view manually when making changes to the filesystem!


ctrl + <left/right>, what about ctrl + <up/down>? We have that and we scroll and its quite cool (dont know if more efficient)..
alt+up/down.. what about alt+left/right (moving word/s / character/s around)?
when highlighting we divide the file into tokens, when undoing we would maybe like to undo by a token, when jumping around we would like to jump by a token..
..also open a file by copy-pasting full path

plausable feature: delete end of line
plausable feature: consider keeping the cursor offset when deleting a line?

plausable feature: tabs, file changes on disk...
* if a single file opened in multiple tabs, then only 1 of those tabs could be used for editing.

plausable feature: conf-file 4 key-combinations

bug: stopping a "large search" ? spaces in file/directory names? not searching in root?


search-in-files crash when searching for "search" in home dir:
	...
	create_search_result_widgets()
	on_app_window_key_press(): hardware keycode: 46
	*** Error in `./a.out': free(): invalid pointer: 0x00007f3b43104d00 ***
	buildandrun.sh: line 1: 22801 Aborted                 (core dumped) ./a.out
yap, another1:
	...
	on_app_window_key_press(): hardware keycode: 64
	grep: write error: Broken pipe
	buildandrun.sh: line 1:  2396 Segmentation fault      (core dumped) ./a.out

* search-in-files button icons

* keeping old root-dirs around might be useful

* filebrowsers naming files/folders + scroll is buggy

SEARCH-REPLACE:
* search-replace: selection disappears when toggling the search-bar and it contains text.
* replace should be more convenient
* maybe search should disappear when not active? maybe search text should disappear when search disappears?
* search-replace: searching could be bit more advanced:
	it could inform us when we hit bottom and go back up,
	maybe count number of matches (1/3, 2/3, ...),
	maybe backward and forward search,
	search from the cursor

* ctrl + +/- -> increase / decrease text size

* opening a large file is slow. see if its still slow if we do no highlighting
* delete(/change) word/token/identifier when cursor is at the beginning/middle/end of it
* delete(/change) inside "", (), {}
* it would be nice to see a list of functions in a file, but thats kind of a C-specific thing so I dont know
* moving lines up/down doesnt scroll, last line buggy
* delete text from beginning of the line to cursor. (we already have "Alt + P")
* would like to see two files at the same time (I do think this is gonna be editor #2 that has this feature though)
* we still dont have text selection from cursor to the beginning/end of () etc.!

* WOULD LIKE TO SIMPLIFY AND ORGANIZE SHORTCUTS, BECAUSE RIGHT NOW IT FEELS LIKE A TERRIBLE MESS
* arrow-key, ctrl + arrow-key, ctrl + fn? + arrow-key; shift selects; can you press 4 keys at the same time?
so we have a shorter and longer jump both horizontally and vertically
* what if alt + ? only ever selects text? (moving lines is useful though)
* shortcuts for sidebar pages
* sometimes I use mouse and sometimes (just for fun) I use keyboard, so both options should be possible (?)

---

* highlighting: pasting larger amount of text
* we lose empty lines when indenting a block of code.
---


ThisIsAnIdentifier = this_is_an_identifier + 123 + 123.456 + 0x123

ctrl + right:
	jumps to the end of the nearest word on the right
ctrl + left
	jumps to the start of the nearest word on the left

abcABC
abc
ABC
123
.,:;-<>(){}[]/\ ...
_

word is a sequence of characters which belong to the same class/category
so how do we define classes?

if we have shorter and longer jumps, then longer jump just means more general classes (includes more characters)

if ctrl + left/right then:
if whitespace, then move right/left until not whitespace
what type of word is it that I am in?
then start moving forwward/backward until we encounter a character of different class
if I already have a selection and then jump to start/end of line, we should add that to the selection, not reselect
- regular expressiony kind of stuff? for replace?

shorter jump classes:
	abc, ABC, 123,
	_, +, -, *, /, =, ., ,, (everything else is in a class of its own)

* if we fail to parse the settings file or the settings file has missing settings (?), we fail an assertion / dont even startup, which is very inconvenient. Use default settings if unable to read settings from the settings file?
* search/replace: would patterns with wildcards be useful?
* decent way to "cut out" a block of text
* crashes when deleting large chunk of text (undo?)
* crashes when deleting a directory (filebrowser)
* nested comments in settings file
* case-(in/)sensitivity when searching in files
* BUG: pasting a doublequote
* undo and autocomplete-character conflict (should be possible to insert text into the text-buffer without autocomplete-character messing with it)
* recently opened files / restore recent state
* option to insert spaces instead of tabs?
* it would be interesting if we could highlight for example for-loops parenthesis etc.

lets take for example a feature like autocompleting '(' with '()'. there are cases when you need '()' and there are cases when you need '('. in former case it saves you from typing ')' but in latter case you now have to do more work because you have to delete the extra ')'. so in deciding whether or notthe feature is good, we have to take into account 2 things: a) how many times do you encounter each case 2) how much work needs to be done in each case

              need '()'   need '('
feature on    work1       work2
feature off   work3       work4

num_cases1 -- number of cases I need '()'
num_cases2 -- number of cases I need '('

total_work_on = num_cases1 * work1 + num_cases2 * work2
total_work_off = num_cases1 * work3 + num_cases2 * work4

once we have measured the amount of work these four cases require and counted the number of cases we need '()' and '(', we can calculate the total amount of work that needs to be done if the feature is on and if the feature is off and then we can compare these two numbers and pick the one which is smaller.

* editing:
	ENTER -- look at the indent of the previous line
	OPEN NEW LINE BEFORE/AFTER --
	TAB -- if at the beginning of the line, "jump over" indent. if the lines before and after have different indent, pick greater?
(?)

* tabs vs spaces. tab width. when autoindenting, what should we do?

* is there a bug in search-replace when I search for something then go to the beginning of the file and search again? Because it should search from the beginning of the file but it isnt

* get rid of the scroll animation
* highlight color values using the color they represent (#123456) (?)
* we should be aware of the changes made to the underlying file on disk. think about it for a bit
* scope-highlighting commented out curly brackets, is there a bug?

THESE WOULD BE NICE, BUT THEY ARE HARD TO IMPLEMENT GIVEN THAT WE DONT HAVE A CONCEPT OF A PROJECT:
- easy way to go to function definition
- easy way to go/see where/how a function is called (?)
say, someone retrieves a function pointer and calls it

---
To get "on track" in terms of it being an editor anyone, other than myself ofcourse, might want to use for any purpose:
---
- GTK themes. How are we going to support all these different GTK-versions? Is it possible to drop GTK entirely?
- different modes for different languages (not just highlighting but features and everything should be language specific)
- memory usage -- why does it go so high?
- code cleanup (tab_get_widget(), TabInfo, all kinds of hacks we have all over the place, ...)
- autocomplete
- easy (gui) way to switch between themes. copy-pasting files around in confusing.
Is there any point to do any of these before we have a concept of a project?

- it should be possible to create a project, add files to it, remove files from it. project is just a collection of files. when user opens a project, we can parse all these files and build some kind of "understanding of the code". i havent really thought about this deeply but everything should become easier (opening files, jumping to function definitions). keeping this "internal understanding" uptodate seems challenging though.
- easy way to change names (functions, types) throughout the whole project

---
The goal is to make a text-editor/IDE which works on Linux, Windows, MacOS?, ...?
Building should be trivial (no dependecies other than the compiler, well I quess we do need a linker and an OS).
It should have a very simple and intuitive user interface. Very small number of features, but very useful features.
It should work well on lower and higher end hardware platforms.
It should be fast and snappy. Performance is critical -- it should never, even if you are on a goddamn Intel 4004, feel slow.
Very small memory footprint. Again so that we support total piece of shit or antique hardware.
Typing every character should be enjoyable.
It should be easy to extend it to support multiple languages. Language support might come with language specific highlighting, features
Installation shouldnt be neccessary at all. You might want OS'es to be aware of it like using it as a default editor to open certain files or whatever, but this should all happen only if the user wants this.
No insisting on storing files on harddisk other than project files

---


It would be more convenient, I think, if the search in file would search as I type.

Multicursor in Sublime is really nice!!!
ctrl + left/right is bad. Wanna jump around much faster! From operator -> operator?
A way to quickly find definitions of functions, structs, enums, etc. And not just in the currently opened file, but in the whole project.
It should be easier to switch to another theme.
The state (opened files etc.) should be preserved.
Is there a better way to do bookmarks?
Undo sucks.
For "open new line" enter-key makes more sense to me, maybe. Rethink default shortcuts.
There is a very nice "open file widget" in 4coder, if I remember correctly. Combination of typing, autocompleting and displaying a list of available options. I think it might be a very nice way to browse the file system (?) By default, in open file dialog I spend most of my effort either on finding the correct name in a long list of names or trying to figure out how to use the quick search feature. Its just not the best thing I think. Just not good you know.
file-browser refresh
we could remove extra whitespace from empty lines at save-time
ctrl +/ctrl - to change text size easily
maybe sometimes we want a message-box assert?
* autocomplete character? we could make it into some more general kind of feature that automatically "expands" text under cursor to whatever the user wants to configure it to. and puts the cursor somewhere. just to speed up repetitive typing.
(There is a difference between "expanding" automatically and hitting a key that triggers an expansion. Also I think they are called "snippets" in NeoVim)
* think about text-expansion feature. do we really need this begin-user-action business? 
* ctrl+z (undo) and ctrl+shift+z (redo)

- where is a function called?
- wanna see definition of a struct

Clicking on search results seemed buggy.
SearchInFiles crashed.


