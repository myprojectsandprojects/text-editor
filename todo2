
- Get rid of numpad keybindings
- Did I brake bold font support for 3.18?
- Search box animation doesnt feel good. Maybe get rid of it entirely. Simplify.
- 2 marks is not enough. need more! maybe improve interface somehow?
- if, if/else, if/else if/else, for, while etc. -- collapsing these quickly might be useful
- What function/method am I in? Could display this in statusbar?
- struct fields, would really like to see them
- Fix @@!
- ctrl + ö/ä when on last line
- ctrl + ö/ä : expanding/shrinking existing selection doesnt work the way it is supposed to work I think
- undo double single quote (generates GTK-errors), undo enclosing within parenthesis
- Should/could scrolling while selecting text with the mouse be improved?
- scope/matching-char highlighting shouldnt highlight plain text
- ctrl up/down keycombination handler itself could clean up technically empty lines which contain whitespace only
- <enter> at the end of the file doesnt scroll
- one tab key press should insert as many tabs as is necessary to avoid hitting tab key multiple times
- '{' <-> '}' -- ignore '{}' in comments, string-literals, char-literals, ... (scope highlighting and ctrl + p/ü)
- ctrl + shift + p/ü text selection
- ctrl + w -- close tab, ctrl + q -- close application (Sublime and Firefox both use these shortcuts for these purposes)
- jump '(' -> ')' etc.
- block highlighting should ignore '{' and '}' in comments
- 'home' and 'end' should jump to the start/end of a wrapped line
- indenting commented lines
- funtion argument name, when declared, is an identifier, so it gets highlighted as an identifier, but it's also part of a function definition header, so it could additionally be highlighted as that. (For example: make function definition headers stand out more by highlighting them in bold.)
- alt + left/right: could this be 'more intelligent jump'? Treat parts of identifiers, colors, URL's, file paths etc as words.
http://abc.xy/123/asd

---

automatic completion ('', "" etc.) vs snippets (you press a key to trigger a completion) vs (suggestion?) completion

autocomplete character -> text expansion

---
ctrl[ + shift] + left/right

When dealing with source code (not plain text):
	word (alphabetic characters, digits, underscores) vs non-word (everything else)
	example words: cat, cat123, 123, _cat, _cat123
	123
	1.23
	0xab
	1.2e1

FORWARD:
middle/start -> end
end -> end next
outside -> end

BACKWARD:
middle/end -> start
start -> start previous
outside -> start

what is a word? (alphabetic, digits, underscores)

ctrl + left/right -- jump

---

mouse selection:

1BUTTON_PRESS -> place cursor
2BUTTON_PRESS -> select word/non-word
3BUTTON_PRESS -> select line

Before user releases the button, we are in a selection mode. The type of selection mode depends on the type of button press:
	1BUTTON_PRESS -> expand by character
	2BUTTON_PRESS -> expand by word/non-word
	3BUTTON_PRESS -> expand by line

The selection is between the initial selection and the mouse (if mouse moves over a word, the selection is expanded by that word)
The cursor is always on the side closer to the beginning of the buffer.

Honestly, I didnt even know about the different modes of selection until I started looking at the way it is designed by GTK very carefully. So is it important to do it exactly this way? Even if it means more or more complicated code? I dont think so.

If I want to select precise characters, I can use a mouse to do it, but updating a selection by word or by line is not important. (?)

Sublime also does that.

---

imagine I could filter files and directories in file browser. say, switch off directories, or, switch on .cpp files and .hpp files. and it would be really easy. you just toggle some buttons. and you can define your own button based on simple rules. would that be a cool feature?

or, say, I have a directory and I want to see all image files, but not only in that directory, but in all subdirectories as well and then I want to sort them based on their dimensions. or I want to sort them somehow by what colors they contain. it would be interesting, but would it actually be useful?

---

Jump to a function definition. A function definition in where? Internet? Local partition? So we arrive at an idea of a project. It limits the scope of our responsibilities.

We can think of a project as a list of files. And then we predigest data in these files into some helpful data structures which are going to make searching for function definitions, type definitions etc. super fast. What if we updated them every time new data is saved on disk? Just parse everything all over again? Sounds very simple, but how slow is it gonna get?

Can a project be thought of as a directory? Just a branch of a filesystem tree? We already have a file browser. So what if it was possible to just click on a directory or a file and select "make this into a C++ project" or "make this into a HTML, CSS, JS project" or "make this into my custom whatver project". For "C++ project" you would maybe write code that parses throught .cpp or .cxx etc. files. But really anything you can do with a directory or a file could happen.

A project is a group of files and info about how to compile and link and run the resulting program. But you wouldnt necessarily compile and link a python-project for example. Or what if I have a collection of text files containing notes, or maybe they are XML-files. Could think about these as projects as well?

---

variable -> definition
function call -> definition
type -> definition

---

open file feature is currently terrible!
Should redesign open file widget into a more general search functionality. Instead of merely searching for files, we could make it search for anything of interest (function definitions, type definitions, files). Difference between it and search-in-files feature would be that search-in-files actually does all the work, while the new search feature would rely on already processed data. This would mean, that the new feature can (hopefully) be very fast, but it searches for project-specific stuff, the kind of things I might be interested in while working with a codebase. And if I switch from one project mode (like C) to another (like Make?) it would look for different things. So, basically, you have one directory, but you can look at it as a C-project or a Make-project or simply bunch of text. Which makes me think that we could actually combine search in files feature with it and search in files behaviour would occur when any project-mode is not selected (project specific preproccesing is not done). What about search and replace across multiple files? Honestly, I dont know who would use it and when...

---

searching:

live searching
preprocessed data

boyer-moore
sort and binary search
hash table

---

void apply_settings(settings, void *user_data) -> we'll call you with that when settings change
text-view
highlighting
search
...

